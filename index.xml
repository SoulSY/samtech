<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SamTech</title>
    <link>https://soulsy.github.io/samtech/</link>
    <description>Recent content on SamTech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 16 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://soulsy.github.io/samtech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Design Pattern 02. Abstract Factory Pattern</title>
      <link>https://soulsy.github.io/samtech/dev/design_pattern/abstract_design_pattern/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://soulsy.github.io/samtech/dev/design_pattern/abstract_design_pattern/</guid>
      <description>The Abstract Factory pattern is a design pattern that provides an interface for creating related objects, separating the responsibility of object creation. This pattern is useful when multiple objects that are related to each other need to be created, and it allows creating objects without depending on specific classes.
Overview of the Abstract Factory Pattern The Abstract Factory pattern allows clients to create objects through an abstract factory interface instead of directly creating them.</description>
    </item>
    
    <item>
      <title>Design Pattern 01. Factory Pattern</title>
      <link>https://soulsy.github.io/samtech/dev/design_pattern/faactory_pattern/</link>
      <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://soulsy.github.io/samtech/dev/design_pattern/faactory_pattern/</guid>
      <description>The Factory pattern is a design pattern that encapsulates object creation, providing flexibility and extensibility. This pattern allows clients to create and retrieve objects through factory methods instead of directly instantiating them.
Overview of the Factory Pattern The Factory pattern involves using factory methods to create and return objects, relieving clients from the responsibility of direct object creation. By utilizing factory methods, clients can easily create objects without being aware of the complex object creation logic.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://soulsy.github.io/samtech/about/</link>
      <pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://soulsy.github.io/samtech/about/</guid>
      <description>Welcome to SamTech, where we delve into various topics and engage in discussions about technology. SamTech represents the number &amp;ldquo;three&amp;rdquo; (Sam in Korean), symbolizing the three key areas we focus on: News, Development, and Knowledge.
Join us on this journey of learning and information exchange as we delve into the world of technology together.
Get ready to embark on an exciting adventure with SamTech. Stay tuned for an enriching experience!</description>
    </item>
    
  </channel>
</rss>