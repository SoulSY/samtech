[{"content":"Builder 패턴의 개요 Builder 패턴은 객체 생성을 유연하고 직관적으로 만들기 위한 디자인 패턴입니다. 이 패턴은 복잡한 객체의 생성 과정을 추상화하고, 사용자가 단계별로 객체를 구성할 수 있게 합니다.\nBuilder 패턴은 다음과 같은 요소로 구성됩니다:\nDirector: 객체 생성을 담당하며, Builder 인터페이스를 사용하여 객체를 구성합니다. Builder: 객체 생성을 위한 인터페이스를 정의하고, 객체의 각 부분을 구성하는 메서드를 제공합니다. ConcreteBuilder: Builder 인터페이스를 구현하여 객체를 구성하는 역할을 합니다. Product: 생성할 객체의 표현입니다. // Product 클래스 public class Product { private String partA; private String partB; private String partC; public void setPartA(String partA) { this.partA = partA; } public void setPartB(String partB) { this.partB = partB; } public void setPartC(String partC) { this.partC = partC; } public String getResult() { return \u0026quot;Part A: \u0026quot; + partA + \u0026quot;, Part B: \u0026quot; + partB + \u0026quot;, Part C: \u0026quot; + partC; } } // Builder 인터페이스 public interface Builder { void buildPartA(); void buildPartB(); void buildPartC(); Product getResult(); } // ConcreteBuilder 클래스 public class ConcreteBuilder implements Builder { private Product product; public ConcreteBuilder() { this.product = new Product(); } public void buildPartA() { product.setPartA(\u0026quot;A\u0026quot;); } public void buildPartB() { product.setPartB(\u0026quot;B\u0026quot;); } public void buildPartC() { product.setPartC(\u0026quot;C\u0026quot;); } public Product getResult() { return product; } } // Director 클래스 public class Director { private Builder builder; public void setBuilder(Builder builder) { this.builder = builder; } public Product construct() { builder.buildPartA(); builder.buildPartB(); builder.buildPartC(); return builder.getResult(); } } // 예제 코드 사용 public class Main { public static void main(String[] args) { Director director = new Director(); Builder builder = new ConcreteBuilder(); director.setBuilder(builder); Product product = director.construct(); System.out.println(product.getResult()); } } 위의 예제 코드에서 Builder 패턴을 사용하여 Product 객체를 생성하고 구성합니다. Builder 인터페이스는 객체 생성을 위한 메서드를 정의하고, ConcreteBuilder 클래스는 해당 인터페이스를 구현하여 실제 객체를 생성하고 구성합니다. Director 클래스는 Builder 인터페이스를 사용하여 객체 생성 과정을 조정하고, 최종적으로 Product 객체를 반환합니다.\n이 예제 코드는 Builder 패턴의 기본적인 구현을 보여줍니다. 각 부분을 적절히 확장하고, 객체의 유효성 검사를 추가하여 실제 프로덕션 환경에서 사용할 수 있는 완전한 Builder 패턴을 구현할 수 있습니다.\nBuilder 패턴의 장점 Builder 패턴은 다음과 같은 장점을 가집니다:\n객체의 생성 과정을 단계적으로 수행하므로, 객체의 구성이 명확하고 유연합니다. 복잡한 객체를 생성할 때, 가독성이 높은 코드를 작성할 수 있습니다. 객체 생성 과정에 대한 의존성을 외부로 노출시키지 않으므로, 객체의 일관성과 안정성을 보장합니다. Builder 패턴을 쓸 때 주의해야 할 점 Builder 패턴을 사용할 때 주의해야 할 점은 다음과 같습니다:\n객체의 생성 과정을 단계적으로 수행하기 때문에, 객체의 일부 구성 요소가 유효하지 않은 상태로 사용될 수 있습니다. 이를 방지하기 위해 객체의 유효성 검사를 수행해야 합니다. Builder 패턴은 일반적으로 복잡한 객체 생성에 사용되지만, 단순한 객체에는 비효율적일 수 있습니다. 객체의 구성 단계가 많거나 복잡하지 않은 경우에는 다른 생성 패턴을 고려해야 합니다. 다음은 단순한 객체의 생성에 Builder 패턴을 사용하여 비효율적인 예제 코드입니다:\npublic class SimpleObject { private String propertyA; private String propertyB; private String propertyC; public SimpleObject(String propertyA, String propertyB, String propertyC) { this.propertyA = propertyA; this.propertyB = propertyB; this.propertyC = propertyC; } // Getters and setters } public class SimpleObjectBuilder { private String propertyA; private String propertyB; private String propertyC; public SimpleObjectBuilder() { } public SimpleObjectBuilder setPropertyA(String propertyA) { this.propertyA = propertyA; return this; } public SimpleObjectBuilder setPropertyB(String propertyB) { this.propertyB = propertyB; return this; } public SimpleObjectBuilder setPropertyC(String propertyC) { this.propertyC = propertyC; return this; } public SimpleObject build() { return new SimpleObject(propertyA, propertyB, propertyC); } } public class Main { public static void main(String[] args) { SimpleObjectBuilder builder = new SimpleObjectBuilder(); SimpleObject simpleObject = builder.setPropertyA(\u0026quot;A\u0026quot;) .setPropertyB(\u0026quot;B\u0026quot;) .setPropertyC(\u0026quot;C\u0026quot;) .build(); } } 위의 예제 코드에서는 단순한 객체인 SimpleObject를 생성하는 데 Builder 패턴을 사용하였습니다. 그러나 SimpleObject 클래스의 생성자에 이미 필요한 속성들을 받아 초기화할 수 있는 방법이 제공되므로, Builder 패턴을 사용하는 것은 비효율적입니다. 객체의 생성에 불필요한 중간 단계인 SimpleObjectBuilder를 거치므로 코드가 더 복잡해지고 가독성이 떨어집니다.\n효율적인 방법은 다음과 같이 바로 SimpleObject 객체를 생성하는 것입니다:\npublic class Main { public static void main(String[] args) { SimpleObject simpleObject = new SimpleObject(\u0026quot;A\u0026quot;, \u0026quot;B\u0026quot;, \u0026quot;C\u0026quot;); } } 이렇게 하면 불필요한 Builder 클래스를 사용하지 않고도 단순한 객체를 직접 생성할 수 있습니다.\nBuilder 패턴과 함께 사용되는 다른 패턴 Builder 패턴은 다른 디자인 패턴과 함께 사용될 수 있습니다. 자주 함께 사용되는 패턴들은 다음과 같습니다:\n추상 팩토리(Abstract Factory) 패턴: 추상 팩토리 패턴을 사용하여 여러 종류의 Builder 인터페이스를 생성하고, 각 Builder 인터페이스에 대응하는 ConcreteBuilder를 사용하여 다양한 종류의 객체를 생성할 수 있습니다. 프로토 타입(Prototype) 패턴: 프로토 타입 패턴을 사용하여 기존의 객체를 복제하고, Builder 패턴을 사용하여 복제된 객체를 수정하거나 추가 구성할 수 있습니다. 일관된 인터페이스(Uniform Interface) 패턴: Builder 패턴을 사용하여 여러 객체를 생성할 때, 일관된 인터페이스를 사용하여 객체를 생성하고 구성할 수 있습니다. ","permalink":"https://soulsy.github.io/samtech/ko/dev/design_pattern/builder_pattern/","title":"디자인 패턴 04. Builder Pattern"},{"content":"Singleton 패턴은 클래스의 인스턴스가 단일하게 유지되도록 보장하는 디자인 패턴입니다. 이 패턴은 어떤 클래스의 인스턴스가 하나만 존재하고, 이를 전역적으로 접근할 수 있는 방법을 제공합니다.\nSingleton 패턴의 개요 Singleton 패턴은 다음과 같은 특징을 가집니다:\n클래스의 인스턴스가 오직 하나만 존재합니다. 전역적으로 접근 가능한 접근점을 제공하여 어디서든 동일한 인스턴스에 접근할 수 있습니다. Singleton 패턴은 다양한 상황에서 유용하게 사용될 수 있으며, 자주 사용되는 패턴 중 하나입니다.\nSingleton 패턴의 장점 Singleton 패턴은 다음과 같은 장점을 가집니다:\n하나의 인스턴스만 존재하므로, 자원의 낭비를 줄일 수 있습니다. 전역적인 접근점을 통해 인스턴스에 접근할 수 있으므로, 간편한 사용이 가능합니다. Singleton 패턴을 잘못 사용하는 경우 Singleton 패턴을 잘못 사용하면 다음과 같은 문제가 발생할 수 있습니다:\n멀티스레드 환경에서 동기화 문제가 발생할 수 있습니다. 동시에 여러 스레드가 인스턴스 생성을 요청할 경우, 여러 인스턴스가 생성될 수 있습니다. 테스트 용이성이 저하될 수 있습니다. Singleton 인스턴스가 의존성으로 주입되지 않고 전역적으로 사용되기 때문에 테스트하기 어려울 수 있습니다. 단일 책임 원칙(Single Responsibility Principle)에 위배될 수 있습니다. Singleton 클래스가 다른 기능을 포함하면서 인스턴스 유일성을 유지하기 위한 코드가 추가될 경우, 클래스의 책임이 너무 많아질 수 있습니다. 잘못된 Singleton 패턴은 다음과 같은 문제를 일으킬 수 있습니다. 여러 스레드가 동시에 인스턴스를 생성할 수 있어서 여러 인스턴스가 생성되거나, 인스턴스의 일관성을 보장할 수 없는 경우입니다. 아래는 이러한 문제가 발생하는 잘못된 Singleton 패턴의 예시 코드입니다.\npublic class BadSingleton { private static BadSingleton instance; private BadSingleton() { // 인스턴스 생성 로직 } public static BadSingleton getInstance() { if (instance == null) { // 여러 스레드가 동시에 이 부분에 진입할 수 있음 instance = new BadSingleton(); } return instance; } // 기타 기능 및 데이터 멤버 } 위의 코드에서 getInstance() 메서드는 여러 스레드가 동시에 인스턴스를 생성할 수 있는 문제가 있습니다. 여러 스레드가 동시에 instance가 null인 것을 확인하고 인스턴스를 생성하게 되면, 서로 다른 인스턴스가 생성될 수 있습니다.\n이러한 상황에서는 동기화(synchronization) 문제를 해결해야 합니다. 아래는 동기화를 추가하여 올바르게 동작하는 Singleton 패턴의 예시 코드입니다.\npublic class GoodSingleton { private static GoodSingleton instance; private GoodSingleton() { // 인스턴스 생성 로직 } public static synchronized GoodSingleton getInstance() { if (instance == null) { instance = new GoodSingleton(); } return instance; } // 기타 기능 및 데이터 멤버 } 위의 코드에서 getInstance() 메서드에 synchronized 키워드를 추가하여 동기화하였습니다. 이를 통해 여러 스레드가 동시에 getInstance() 메서드에 접근하는 것을 방지하고, 하나의 스레드만이 인스턴스를 생성할 수 있도록 보장합니다.\n올바르게 동작하는 Singleton 패턴은 멀티스레드 환경에서 안전하게 사용할 수 있습니다. 하지만 Singleton 패턴을 사용할 때는 주의해야 하며, 필요한 경우에만 사용하는 것이 좋습니다.\nSingleton 패턴과 함께 사용하면 좋은 패턴 Singleton 패턴과 함께 사용하면 좋은 패턴으로는 Abstract Factory 패턴이 있습니다. Abstract Factory 패턴을 사용하여 Singleton 패턴으로 생성된 인스턴스를 활용할 수 있습니다. Singleton 패턴을 적용하여 팩토리 클래스의 인스턴스가 단일하게 유지되면, 일관된 객체 생성을 보장할 수 있습니다.\n아래는 Singleton 패턴과 Abstract Factory 패턴을 함께 사용하는 예제 코드입니다.\n// Singleton 패턴을 적용한 팩토 리 클래스 public class SingletonFactory implements AbstractFactory { private static SingletonFactory instance; private SingletonFactory() { // 인스턴스 생성 로직 } public static synchronized SingletonFactory getInstance() { if (instance == null) { instance = new SingletonFactory(); } return instance; } public AbstractProductA createProductA() { return new ConcreteProductA(); } public AbstractProductB createProductB() { return new ConcreteProductB(); } } // Abstract Factory 패턴을 위한 인터페이스 public interface AbstractFactory { AbstractProductA createProductA(); AbstractProductB createProductB(); } // 구체적인 제품 클래스 public class ConcreteProductA implements AbstractProductA { // 제품 A의 구현 } public class ConcreteProductB implements AbstractProductB { // 제품 B의 구현 } 위의 예제 코드에서 Singleton 패턴을 적용한 SingletonFactory 클래스는 AbstractFactory 인터페이스를 구현합니다. SingletonFactory 클래스의 인스턴스는 Singleton 패턴에 따라 단일하게 유지되며, createProductA 및 createProductB 메서드를 통해 객체를 생성합니다.\n이렇게 함께 사용되는 경우, Singleton 패턴을 통해 Abstract Factory 패턴의 구체 팩토리 클래스의 인스턴스가 단일하게 유지되므로, 일관된 객체 생성이 가능해집니다.\n","permalink":"https://soulsy.github.io/samtech/ko/dev/design_pattern/singleton_pattern/","title":"디자인 패턴 03. Singleton Pattern"},{"content":"Abstract Factory 패턴은 관련된 객체들을 생성하는 인터페이스를 제공하여 객체 생성에 대한 책임을 분리하는 디자인 패턴입니다. 이 패턴은 서로 연관된 다수의 객체를 생성해야 할 때 유용하며, 구체적인 클래스에 의존하지 않고 객체를 생성할 수 있도록 합니다.\nAbstract Factory 패턴의 개요 Abstract Factory 패턴은 클라이언트가 객체를 생성하는 대신, 추상 팩토리 인터페이스를 통해 관련 객체들을 생성합니다. 추상 팩토리는 관련된 객체들의 집합에 대한 인터페이스를 제공하며, 구체적인 팩토리 클래스는 이 인터페이스를 구현하여 실제 객체를 생성합니다. 이를 통해 클라이언트는 구체적인 클래스에 직접 의존하지 않고도 객체를 생성할 수 있습니다.\n예제 코드 // 추상 제품 A public interface AbstractProductA { void performAction(); } // 추상 제품 B public interface AbstractProductB { void performAction(); } // 구체적인 제품 A1 public class ConcreteProductA1 implements AbstractProductA { @Override public void performAction() { System.out.println(\u0026quot;ConcreteProductA1에서 동작 수행\u0026quot;); } } // 구체적인 제품 A2 public class ConcreteProductA2 implements AbstractProductA { @Override public void performAction() { System.out.println(\u0026quot;ConcreteProductA2에서 동작 수행\u0026quot;); } } // 구체적인 제품 B1 public class ConcreteProductB1 implements AbstractProductB { @Override public void performAction() { System.out.println(\u0026quot;ConcreteProductB1에서 동작 수행\u0026quot;); } } // 구체적인 제품 B2 public class ConcreteProductB2 implements AbstractProductB { @Override public void performAction() { System.out.println(\u0026quot;ConcreteProductB2에서 동작 수행\u0026quot;); } } // 추상 팩토리 인터페이스 public interface AbstractFactory { AbstractProductA createProductA(); AbstractProductB createProductB(); } // 구체적인 팩토리 A public class ConcreteFactoryA implements AbstractFactory { @Override public AbstractProductA createProductA() { return new ConcreteProductA1(); } @Override public AbstractProductB createProductB() { return new ConcreteProductB1(); } } // 구체적인 팩토리 B public class ConcreteFactoryB implements AbstractFactory { @Override public AbstractProductA createProductA() { return new ConcreteProductA2(); } @Override public AbstractProductB createProductB() { return new ConcreteProductB2(); } } // 클라이언트 코드 public class Client { private AbstractProductA productA; private AbstractProductB productB; public Client(AbstractFactory factory) { productA = factory.createProductA(); productB = factory.createProductB(); } public void performActions() { productA.performAction(); productB.performAction(); } public static void main(String[] args) { AbstractFactory factoryA = new ConcreteFactoryA(); Client clientA = new Client(factoryA); clientA.performActions(); // 출력: // ConcreteProductA1에서 동작 수행 // ConcreteProductB1에서 동작 수행 AbstractFactory factoryB = new ConcreteFactoryB(); Client clientB = new Client(factoryB); clientB.performActions(); // 출력: // ConcreteProductA2에서 동작 수행 // ConcreteProductB2에서 동작 수행 } } Abstract Factory 패턴의 장점 관련된 객체들을 생성하기 위한 일관된 인터페이스를 제공하여 객체 생성에 대한 책임을 분리합니다. 클라이언트는 구체적인 클래스에 직접 의존하지 않고도 객체를 생성할 수 있습니다. 객체들의 일관성과 호환성을 유지할 수 있습니다. 새로운 구체 팩토리 클래스를 추가하여 다양한 객체 구성을 생성할 수 있습니다. Factory 패턴과 Abstract Factory 패턴 비교 앞서 Factory 패턴의 글에서 말했던 것처럼 과도한 Factory 패턴의 사용이 불필요한 분기문으로 가독성이 떨어지는 상황이 발생할 수 있습니다. 아래 예제는 Factory 패턴의 과한 사용으로 코드 가독성이 떨어지는 예제입니다.\n// 동물 인터페이스 public interface Animal { void makeSound(); } // 고양이 클래스 public class Cat implements Animal { @Override public void makeSound() { System.out.println(\u0026quot;야옹\u0026quot;); } } // 개 클래스 public class Dog implements Animal { @Override public void makeSound() { System.out.println(\u0026quot;멍멍\u0026quot;); } } // 새 클래스 public class Bird implements Animal { @Override public void makeSound() { System.out.println(\u0026quot;짹짹\u0026quot;); } } // Animal을 생성하는 AnimalFactory 클래스 public class AnimalFactory { public static Animal createAnimal(String type) { if (type.equalsIgnoreCase(\u0026quot;고양이\u0026quot;)) { return new Cat(); } else if (type.equalsIgnoreCase(\u0026quot;개\u0026quot;)) { return new Dog(); } else if (type.equalsIgnoreCase(\u0026quot;새\u0026quot;)) { return new Bird(); } else if (type.equalsIgnoreCase(\u0026quot;토끼\u0026quot;)) { return new Rabbit(); } else if (type.equalsIgnoreCase(\u0026quot;뱀\u0026quot;)) { return new Snake(); } return null; } } // 토끼 클래스 public class Rabbit implements Animal { @Override public void makeSound() { System.out.println(\u0026quot;깡총깡총\u0026quot;); } } // 뱀 클래스 public class Snake implements Animal { @Override public void makeSound() { System.out.println(\u0026quot;실실\u0026quot;); } } // 클라이언트 코드 public class Client { public static void main(String[] args) { Animal cat = AnimalFactory.createAnimal(\u0026quot;고양이\u0026quot;); cat.makeSound(); // 출력: \u0026quot;야옹\u0026quot; Animal dog = AnimalFactory.createAnimal(\u0026quot;개\u0026quot;); dog.makeSound(); // 출력: \u0026quot;멍멍\u0026quot; Animal bird = AnimalFactory.createAnimal(\u0026quot;새\u0026quot;); bird.makeSound(); // 출력: \u0026quot;짹짹\u0026quot; Animal rabbit = AnimalFactory.createAnimal(\u0026quot;토끼\u0026quot;); rabbit.makeSound(); // 출력: \u0026quot;깡총깡총\u0026quot; Animal snake = AnimalFactory.createAnimal(\u0026quot;뱀\u0026quot;); snake.makeSound(); // 출력: \u0026quot;실실\u0026quot; } } Abstract Factory 패턴을 사용하면 아래와 같이 리팩토링을 진행해 볼 수 있습니다.\n// 동물 인터페이스 public interface Animal { void makeSound(); } // 고양이 클래스 public class Cat implements Animal { @Override public void makeSound() { System.out.println(\u0026quot;야옹\u0026quot;); } } // 개 클래스 public class Dog implements Animal { @Override public void makeSound() { System.out.println(\u0026quot;멍멍\u0026quot;); } } // 새 클래스 public class Bird implements Animal { @Override public void makeSound() { System.out.println(\u0026quot;짹짹\u0026quot;); } } // 추상 동물 팩토리 public interface AnimalFactory { Animal createAnimal(); } // 고양이 팩토리 public class CatFactory implements AnimalFactory { @Override public Animal createAnimal() { return new Cat(); } } // 개 팩토리 public class DogFactory implements AnimalFactory { @Override public Animal createAnimal() { return new Dog(); } } // 새 팩토리 public class BirdFactory implements AnimalFactory { @Override public Animal createAnimal() { return new Bird(); } } // 클라이언트 코드 public class Client { public static void main(String[] args) { AnimalFactory catFactory = new CatFactory(); Animal cat = catFactory.createAnimal(); cat.makeSound(); // 출력: \u0026quot;야옹\u0026quot; AnimalFactory dogFactory = new DogFactory(); Animal dog = dogFactory.createAnimal(); dog.makeSound(); // 출력: \u0026quot;멍멍\u0026quot; AnimalFactory birdFactory = new BirdFactory(); Animal bird = birdFactory.createAnimal(); bird.makeSound(); // 출력: \u0026quot;짹짹\u0026quot; } } 물론 Abstract Factory 패턴도 과도하게 사용하면 Factory 패턴과 마찬가지로 부작용이 생길 수 있으니 항상 주어진 상황과 해결하려는 방향에 맞게 적절하게 사용함을 기억해야 합니다.\nAbstract Factory 패턴과 함께 사용되는 패턴 Abstract Factory 패턴과 함께 사용하면 좋은 패턴으로는 Singleton 패턴이 있습니다. Singleton 패턴을 사용하여 팩토리 클래스의 인스턴스가 단일하게 유지되도록 함으로써, 일관된 객체 생성을 보장할 수 있습니다.\n이상으로 Abstract Factory 패턴에 대한 내용을 정리한 글입니다. 다른 패턴들과 함께 사용되거나 잘못 사용될 수 있는 경우 등에 대해서도 언급하였습니다. 이 글이 도움이 되기를 바랍니다.\n","permalink":"https://soulsy.github.io/samtech/ko/dev/design_pattern/abstract_factory_pattern/","title":"디자인 패턴 02. Abstract Factory Pattern"},{"content":"Factory 패턴은 객체 생성을 캡슐화하여 유연성과 확장성을 제공하는 디자인 패턴입니다. 이 패턴은 클라이언트에게 직접 객체 생성을 맡기지 않고, 팩토리 메서드를 통해 객체를 생성하고 반환하는 방식을 사용합니다.\nFactory 패턴의 개요 Factory 패턴은 클라이언트가 객체를 생성하는 대신, 팩토리 메서드를 호출하여 객체를 생성하고 반환합니다. 이를 통해 클라이언트는 객체 생성과 관련된 복잡한 로직을 알 필요 없이, 팩토리 메서드를 통해 쉽게 객체를 생성할 수 있습니다.\n// 동물 인터페이스 public interface Animal { void makeSound(); } // 고양이 클래스 public class Cat implements Animal { @Override public void makeSound() { System.out.println(\u0026quot;야옹\u0026quot;); } } // 개 클래스 public class Dog implements Animal { @Override public void makeSound() { System.out.println(\u0026quot;멍멍\u0026quot;); } } // 새 클래스 public class Bird implements Animal { @Override public void makeSound() { System.out.println(\u0026quot;짹짹\u0026quot;); } } // Animal을 생성하는 AnimalFactory 클래스 public class AnimalFactory { public static Animal createAnimal(String type) { if (type.equalsIgnoreCase(\u0026quot;고양이\u0026quot;)) { return new Cat(); } else if (type.equalsIgnoreCase(\u0026quot;개\u0026quot;)) { return new Dog(); } else if (type.equalsIgnoreCase(\u0026quot;새\u0026quot;)) { return new Bird(); } return null; } } // 클라이언트 코드 public class Client { public static void main(String[] args) { Animal cat = AnimalFactory.createAnimal(\u0026quot;고양이\u0026quot;); cat.makeSound(); // 출력: \u0026quot;야옹\u0026quot; Animal dog = AnimalFactory.createAnimal(\u0026quot;개\u0026quot;); dog.makeSound(); // 출력: \u0026quot;멍멍\u0026quot; Animal bird = AnimalFactory.createAnimal(\u0026quot;새\u0026quot;); bird.makeSound(); // 출력: \u0026quot;짹짹\u0026quot; } } Factory 패턴의 장점 객체 생성 로직을 캡슐화하여 코드의 가독성과 유지보수성을 향상시킵니다. 새로운 객체를 추가하거나 기존 객체를 변경할 때, Factory 클래스의 팩토리 메서드만 수정하면 되므로 확장성이 좋습니다. 클라이언트는 객체 생성에 대한 결정을 팩토리 메서드에 위임함으로써 의존성을 낮출 수 있습니다. Factory 패턴을 잘못 사용하는 경우 Factory 패턴을 잘못 사용하면 코드가 복잡해질 수 있습니다. 과도한 팩토리 메서드의 사용이나 복잡한 조건문으로 인해 코드의 가독성과 유지보수성이 저하될 수 있습니다. 따라서, 적절한 상황과 용도에서 Factory 패턴을 사용해야 합니다.\n과도한 팩토리 메서드 사용으로 가독성과 유지보수성이 저하되는 예제 코드를 보여드리겠습니다:\n// 동물 인터페이스 public interface Animal { void makeSound(); } // 고양이 클래스 public class Cat implements Animal { @Override public void makeSound() { System.out.println(\u0026quot;야옹\u0026quot;); } } // 개 클래스 public class Dog implements Animal { @Override public void makeSound() { System.out.println(\u0026quot;멍멍\u0026quot;); } } // 새 클래스 public class Bird implements Animal { @Override public void makeSound() { System.out.println(\u0026quot;짹짹\u0026quot;); } } // Animal을 생성하는 AnimalFactory 클래스 public class AnimalFactory { public static Animal createAnimal(String type) { if (type.equalsIgnoreCase(\u0026quot;고양이\u0026quot;)) { return new Cat(); } else if (type.equalsIgnoreCase(\u0026quot;개\u0026quot;)) { return new Dog(); } else if (type.equalsIgnoreCase(\u0026quot;새\u0026quot;)) { return new Bird(); } else if (type.equalsIgnoreCase(\u0026quot;토끼\u0026quot;)) { return new Rabbit(); } else if (type.equalsIgnoreCase(\u0026quot;뱀\u0026quot;)) { return new Snake(); } return null; } } // 토끼 클래스 public class Rabbit implements Animal { @Override public void makeSound() { System.out.println(\u0026quot;깡총깡총\u0026quot;); } } // 뱀 클래스 public class Snake implements Animal { @Override public void makeSound() { System.out.println(\u0026quot;실실\u0026quot;); } } // 클라이언트 코드 public class Client { public static void main(String[] args) { Animal cat = AnimalFactory.createAnimal(\u0026quot;고양이\u0026quot;); cat.makeSound(); // 출력: \u0026quot;야옹\u0026quot; Animal dog = AnimalFactory.createAnimal(\u0026quot;개\u0026quot;); dog.makeSound(); // 출력: \u0026quot;멍멍\u0026quot; Animal bird = AnimalFactory.createAnimal(\u0026quot;새\u0026quot;); bird.makeSound(); // 출력: \u0026quot;짹짹\u0026quot; Animal rabbit = AnimalFactory.createAnimal(\u0026quot;토끼\u0026quot;); rabbit.makeSound(); // 출력: \u0026quot;깡총깡총\u0026quot; Animal snake = AnimalFactory.createAnimal(\u0026quot;뱀\u0026quot;); snake.makeSound(); // 출력: \u0026quot;실실\u0026quot; } } 위의 예제에서는 Factory 패턴을 사용하여 객체를 생성하고 있지만, 팩토리 메서드의 분기문이 많아져 가독성이 저하됩니다. 새로운 동물을 추가할 때마다 AnimalFactory 클래스의 팩토리 메서드를 수정해야 하는 번거로움이 있습니다. 이러한 상황에서는 팩토리 메서드의 사용을 줄이고, 추상 팩토리 패턴을 고려하는 것이 도움이 됩니다.\nFactory 패턴과 함께 사용되는 패턴 Factory 패턴과 함께 사용하면 좋은 패턴은 추상 팩토리(Abstract Factory) 패턴입니다. 추상 팩토리 패턴은 관련된 객체들을 생성하는 인터페이스를 제공하여 객체 생성에 대한 책임을 분리합니다.\nFactory 패턴과 함께 자주 등장하는 패턴으로는 Singleton 패턴이 있습니다. Singleton 패턴은 단일 인스턴스를 보장하고, 팩토리 클래스 내에서 단일 인스턴스를 생성할 수 있습니다.\n","permalink":"https://soulsy.github.io/samtech/ko/dev/design_pattern/factory_pattern/","title":"디자인 패턴 01. Factory Pattern"},{"content":"삼테크에 오신 것을 환영합니다. 삼테크는 다양한 주제를 다루며 기술에 대한 토론을 진행하는 곳입니다. 삼테크라는 이름에 걸맞게 세 가지 주요 분야(News, Development, Knowledge)에 대해 다룹니다.\n삼테크는 보안 관련 주제도 다루지만, 주로 다양한 기술, 개발 및 IT 동향에 초점을 맞추고 있습니다. 우리는 기술 열정을 자유롭게 탐구하고 공유할 수 있는 플랫폼을 제공합니다. 함께 학습하고 정보를 교류하는 이 여정에 참여해보세요.\n","permalink":"https://soulsy.github.io/samtech/ko/about/","title":"About"}]